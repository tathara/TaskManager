import TelegramBot from 'node-telegram-bot-api';
import { authOptions } from './bot/bot.options.js';
import UserController from './user/user.controller.js';
import BotSender from './bot/bot.sender.js';
import BotProcessor from './bot/bot.processor.js';

let userController, botSender, botProcessor;

const telegramToken = process.env.TELEGRAM_TOKEN;
const bot = new TelegramBot(telegramToken, { polling: true });


bot.setMyCommands([
    { command: '/start', description: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' },
]);

bot.on('message', async msg => {
    const text = msg.text;
    const chatId = msg.chat.id;
    const userName = msg.chat.first_name;

    if (text === '/start' && userController) {
        await bot.sendMessage(chatId, `üëÄ ${userName}, —Ç—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!`)
        return botSender.sendMainMenu(chatId);
    }
    else if (text === '/start' && !userController) {
        await bot.sendMessage(chatId, `‚úÖ –ü—Ä–∏–≤–µ—Ç, ${userName}!`);

        return bot.sendMessage(chatId, `üòé –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞–¥ –∫–æ–º–∞–Ω–¥–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏, –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é!`, authOptions);
    }
    else if (msg?.web_app_data?.data) {
        try {
            const data = JSON.parse(msg?.web_app_data?.data);
            userController = new UserController(data);
            botSender = new BotSender(bot, userController);
            botProcessor = new BotProcessor(bot, userController, botSender);

            if (userController) {
                await bot.sendMessage(chatId, `‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞!`);

                return botSender.sendMainMenu(chatId);
            }
        }
        catch (error) {
            return bot.sendMessage(chatId, '‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!');
        }
    }
    else {
        return bot.sendMessage(chatId, `‚õîÔ∏è –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –æ —á–µ–º —Ç—ã!`);
    }
});

bot.on('callback_query', async msg => {
    try {
        const data = msg.data;
        const chatId = msg.message.chat.id;

        await botProcessor.processCallback(data, chatId);
    }
    catch (error) {
        return bot.sendMessage(chatId, '‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞!');
    }
});