import TelegramBot from 'node-telegram-bot-api';
import { UserModel } from './db/models.js';

let user;
const telegramToken = process.env.TELEGRAM_TOKEN;
const bot = new TelegramBot(telegramToken, { polling: true });

const authOptions = {
    reply_markup: JSON.stringify({
        keyboard: [
            [{ text: 'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', web_app: { url: process.env.AUTHORIZATION_URL } }, { text: 'üóù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', web_app: { url: process.env.REGISTRATION_URL } }],
        ]
    })
};

const botOptions = {
    reply_markup: JSON.stringify({
        keyboard: [
            ['üîç –í—Å–µ –∑–∞–¥–∞—á–∏', 'üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏'],
            ['‚úÖ –í–∑—è—Ç—å –∑–∞–¥–∞—á—É', '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É'],
            ['‚ùï –£—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–¥–∞—á—É', '‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É']
        ],
        resize_keyboard: true,
        one_time_keyboard: true
    })
};

bot.setMyCommands([
    { command: '/start', description: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' },
]);

bot.on('message', async msg => {
    const text = msg.text;
    const chatId = msg.chat.id;
    const userName = msg.chat.first_name;

    if (text === '/start' && user) {
        await bot.sendMessage(chatId, `üëÄ ${userName}, —Ç—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ–¥ –ª–æ–≥–∏–Ω–æ–º ${user.login}!`)
        return await sendMainMenu(chatId);
    }
    else if (text === '/start') {
        await bot.sendMessage(chatId, `‚úÖ –ü—Ä–∏–≤–µ—Ç, ${userName}!`);
        return await bot.sendMessage(chatId, `üòé –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞–¥ –∫–æ–º–∞–Ω–¥–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏, –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é!`, authOptions);
    }
    else if (msg?.web_app_data?.data) {
        try {
            const data = JSON.parse(msg?.web_app_data?.data);
            user = await UserModel.findByPk(data.id);

            if (user) {
                await bot.sendMessage(chatId, `‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞!`);
                return await sendMainMenu(chatId);
            }
        }
        catch (error) {
            console.log(error);
        }
    }
    else {
        return bot.sendMessage(chatId, `‚õîÔ∏è –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –æ —á–µ–º —Ç—ã!`,);
    }
});

async function sendMainMenu(chatId) {
    await bot.sendMessage(chatId, 'üèÅ –¢—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!', botOptions);
}

// bot.on('callback_query', async msg => {
//     const data = msg.data;
//     const chatId = msg.message.chat.id;

//     processCallback(data, chatId)
// });

// function fillKeys(tasks, action) {
//     return Object.keys(tasks).map(key => [{ text: key, callback_data: `${action}_${key}` }]);
// }

// function makeMarkup(tasks, action) {
//     const markup = {
//         reply_markup: JSON.stringify({
//             inline_keyboard: fillKeys(tasks, action),
//         })
//     }

//     return markup;
// }

// async function processAction(action, chatId) {
//     const tasks = action === 'take' ? user.getAllTasks() : user.getThisTasks();
//     const tasksOptions = makeMarkup(tasks, action);

//     await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏', tasksOptions);
// }

// async function processCallback(data, chatId) {
//     switch (data) {
//         case 'tasks':
//             const tasks = user.getAllTasksString();
//             return await bot.sendMessage(chatId, tasks);

//         case 'thisTasks':
//             const thisTasks = user.getThisTasksString();
//             return await bot.sendMessage(chatId, thisTasks);

//         case 'take':
//             return await processAction('take', chatId);

//         case 'reject':
//             await processAction('reject', chatId);
//             return;

//         case 'commit':
//             await processAction('commit', chatId);
//             return;

//         case 'uncommit':
//             await processAction('uncommit', chatId);
//             return;

//         default:
//             await processInput(data, chatId);
//     }
// }

// async function processInput(input, chatId) {
//     const action = input.split('_');
//     const taskId = action[1];

//     switch (action[0]) {
//         case 'take':
//             user.takeTask(taskId);
//             return await bot.sendMessage(chatId, `‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞—á—É ‚Ññ${taskId}`);

//         case 'reject':
//             user.rejectTask(taskId);
//             return await bot.sendMessage(chatId, `‚ùå –í—ã –æ—Ç–∫–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞—á—É ‚Ññ${taskId}`);

//         case 'commit':
//             user.commitTask(taskId);
//             return await bot.sendMessage(chatId, `‚ùï –í—ã —É—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–¥–∞—á—É ‚Ññ${taskId}`);

//         case 'uncommit':
//             user.uncommitTask(taskId);
//             return await bot.sendMessage(chatId, `‚ùóÔ∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á—É ‚Ññ${taskId} –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É`);
//     }
// }